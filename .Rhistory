library(plyr)
summarize(group_by(dprime, .(dprime)))
summarize(dprime, mean(dprime))
summarize(dprime, mean(dprime), na.rm=T)
group_by(dprime$emotion)
group_by(dprime dprime$emotion)
group_by(dprime, dprime$emotion)
group_by(dprime, emotion)
test <- group_by(dprime, emotion)
View(test)
test <- group_by(dprime, as.character(emotion))
test <- group_by(dprime, dprime)
test <- summarize(test, mean(dprime))
test <- group_by(dprime, dprime)
View(test)
test <- summarize(test, mean(pHIT))
test <- group_by(dprime, dprime)
test <- group_by(data, subject)
test <- group_by(data, Subject)
View(test)
summarize(test, mean(Response))
library(plyr)
ddply(dprime, dprime)
ddply(dprime, ~dprime, summarize, pHIT = mean(dprime))
ddply(dprime, ~dprime, summarize, pHIT = mean(RT))
ddply(dprime, ~emotion, summarize, pHIT = mean(RT))
ddply(dprime, .(emotion), summarize, pHIT = mean(RT))
ddply(dprime, ~ emotion, summarize, pHIT = mean(RT))
ddply(dprime, ~ emotion, summarize, pHIT = mean(dprime))
class(dprime$emotion)
ddply(dprime, ~ emotion, summarize, pHIT = mean(dprime))
ddply(dprime, ~ emotion, summarize, pHIT = dpirme)
ddply(dprime, ~ emotion, summarize, pHIT = dprime)
ddply(dprime,emotion, summarize, pHIT = dprime)
ddply(dprime,.(emotion), summarize, pHIT = dprime)
library(gapminder)
ddply(data, c("Subject","Emotion"))
ddply(data, c("Subject","Emotion"), summarize, N=length(Response))
ddply(data, c("Subject","Emotion", "Answer"), summarize, dprime=mean(Response))
ddply(data, c("Subject","Emotion"), summarize, dprime=mean(Response))
ddply(data[data$Emotion=='neutral'], c("Subject","Emotion"), summarize, dprime=mean(Response))
ddply(data[data$Emotion=='neutral',], c("Subject","Emotion"), summarize, dprime=mean(Response))
ddply(data[data$Emotion=='neutral',], c("Subject"), summarize, dprime=mean(Response))
ddply(data[data$Emotion!='neutral'], c("Subject","Emotion"), summarize, dprime=mean(Response))
ddply(data[data$Emotion!='neutral',], c("Subject","Emotion"), summarize, dprime=mean(Response))
pFAs <- ddply(data[data$Emotion=='neutral',], c("Subject"), summarize, dprime=mean(Response))
pFAs <- rep(pFAs[,c(1,3)], each=6)
View(pFAs)
pFAs <- rep(pFAs, each=6)
pFAs <- ddply(data[data$Emotion=='neutral',], c("Subject"), summarize, pFAs=mean(Response))
pFAs <- rep(pFAs$pFAs, each=6)
pHIT <- ddply(data[data$Emotion!='neutral',], c("Subject","Emotion"), summarize, pHIT=mean(Response))
pFAs <- ddply(data[data[,by]==noiseval,], c("Subject"), summarize, pFAs=mean(Response))
by="Emotion"
View(data)
noiseval="noise"
pFAs <- ddply(data[data[,by]==noiseval,], c("Subject"), summarize, pFAs=mean(Response))
pFAs <- rep(pFAs$pFAs, each=6)
pHIT <- ddply(data[data[,by]!=noiseval,], c("Subject",by), summarize, pHIT=mean(Response))
output <- cbind(pHIT, pFAs)
pHIT <- ddply(data[data[,by]!=noiseval,], c("Subject",by), summarize, pHIT=mean(Response), drop=T)
output <- cbind(pHIT, pFAs)
pFAs <- ddply(data[data[,by]==noiseval,], c("Subject"), summarize, pFAs=mean(Response))
441/63
pFAs <- rep(pFAs$pFAs, each=7)
pHIT <- ddply(data[data[,by]!=noiseval,], c("Subject",by), summarize, pHIT=mean(Response), drop=T)
output <- cbind(pHIT, pFAs)
View(output)
pFAs <- ddply(data[data[,by]==noiseval,], c("Subject"), summarize, pFAs=mean(Response))
pFAs <- rep(pFAs$pFAs, each=7)
pHIT <- ddply(data[data[,by]!=noiseval,], c("Subject",by), summarize, pHIT=mean(Response))
output <- cbind(pHIT, pFAs)
dprime <- qnorm(pHIT) - qnorm(pFAs)
dprime <- qnorm(pHIT$pHIT) - qnorm(pFAs)
output <- cbind(pHIT, pFAs, dprime)
dprime
output <- cbind(pHIT, pFAs, dprime)
View(output)
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise")
View(dprime)
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise")
View(dprime)
dprimeMEAN <- ddply(dprime, .(Emotion), summarize, dprime = mean(dprime))
View(dprimeMEAN)
barplot(dprimeMEAN$dprime, names.arg = dprimeMEAN$Emotion)
total.model <- aov(dprime ~ Emotion + Error(Subject/Emotion), data = dprimeMEAN)
View(dprimeMEAN)
total.model <- aov(dprime ~ Emotion + Error(Subject/Emotion), data = dprime)
summary(total.model)
partAverage <- ddply(dprime, .(Subject), summarize, dprime = mean(dprime))
View(partAverage)
dprime$dprimeAdjusted <- NA
for(i in unique(dprime$subject)){
dprime$dprimeAdjusted[dprime$subject==i] <- dprime$dprime[dprime$subject==i] - partAverage$x[partAverage$Group.1==i]
}
View(dprime)
data$FaceByEmotion <- with(data, interaction(FaceIdentity, Emotion), drop=T)
dprime <- calc_dprime(data, "Emotion", "noise")
#now let's aggregate for inspection
dprimeMEAN <- ddply(dprime, .(Emotion), summarize, dprime = mean(dprime))
total.model <- aov(dprime ~ Emotion + Error(Subject/Emotion), data = dprime)
summary(total.model)
partAverage <- ddply(dprime, .(Subject), summarize, dprime = mean(dprime))
#
participant <- calc_dprime(data, "FaceByEmotion", "no.noise")
View(data)
View(participant)
load("~/Downloads/4138635/R Materials for CIs/kp1_seed_NA_time_Jan_22_2015_12_24.Rdata")
View(withimgdata)
load("~/Downloads/4138635/R Materials for CIs/kp1_seed_NA_time_Jan_22_2015_12_24.Rdata")
install.packages("dplyr")
install.packages("psych")
load("~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/AnalysisDataWithIdentity.RData")
View(dprimeMEAN)
View(dprime)
load("~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/BackupwithMDS.RData")
View(dprimeMEAN)
View(dprimeEmots)
View(dprimeMEAN)
View(dprimeEmots)
View(dprime)
View(dimsDF)
View(dprimeReduce)
View(data)
c("subject", NULL)
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
View(data)
knitr::opts_chunk$set(echo = TRUE)
data$FaceByEmotion <- with(data, interaction(FaceIdentity, Emotion), drop=T)
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
library(plyr)
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
View(dprime)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:dplyr", unload=TRUE)
x <- c("a", "b", "c")
mapvalues(x, c("a", "c"), c("A", "C"))
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprimeMEAN <- ddply(dprime, .(Emotion, FaceIdentity), summarize, dprime = mean(dprime))
View(dprimeMEAN)
x <- c(1, 2, 3)
mapvalues(x, c(1,3), c(5, 6))
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
View(dprime)
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
View(dprime)
debugSource('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
View(pHIT)
debugSource('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
View(output)
unique(Grouping)
210/7
debugSource('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
View(output)
View(output)
dprimeMEAN <- ddply(dprime, .(Emotion, FaceIdentity), summarize, dprime = mean(dprime))
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
dprimeMEAN <- ddply(dprime, .(Emotion, FaceIdentity), summarize, dprime = mean(dprime))
View(dprimeMEAN)
source('~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Useful Functions.R')
dprime <- calc_dprime(data, "Emotion", "noise", "FaceIdentity")
dprimeMEAN <- ddply(dprime, .(Emotion, FaceIdentity), summarize, dprime = mean(dprime))
View(dprimeMEAN)
total.model <- aov(dprime ~ Emotion*FaceIdentity + Error(Subject/Emotion*FaceIdentity), data = dprime)
summary(total.model)
for(i in unique(dprime$FaceIdentity)){print(i)}
for(i in unique(dprime$FaceIdentity)){print(aov(dprime ~ Emotion + Error(Subject/Emotion)))}
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
for(i in unique(dprime$FaceIdentity)){print(aov(dprime ~ Emotion + Error(Subject/Emotion), data = select(dprime, FaceIdentity = i)))}
select(dprime, FaceIdentity = unqiue(dprime$FaceIdentity)[1])
select(dprime, FaceIdentity = unique(dprime$FaceIdentity)[1])
i = unique(dprime$FaceIdentity)[1]
select(dprime, FaceIdentity = unique(dprime$FaceIdentity)[1])
select(dprime, FaceIdentity = i
)
select(dprime, FaceIdentity = paste(i))
select(dprime, FaceIdentity = eval(i))
select(dprime, FaceIdentity = "SS")
for(i in unique(dprime$FaceIdentity)){print(aov(dprime ~ Emotion + Error(Subject/Emotion), data = select(dprime, FaceIdentity == i)))}
dprime$FaceIdentity==i
for(i in unique(dprime$FaceIdentity)){print(aov(dprime ~ Emotion + Error(Subject/Emotion), data = select(dprime, FaceIdentity == i)))}
select(dprime, FaceIdentity == i)
filter(dprime, FaceIdentity == i)
for(i in unique(dprime$FaceIdentity)){print(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))}
for(i in unique(dprime$FaceIdentity)){summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))}
for(i in unique(dprime$FaceIdentity)){print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i))))}
test <- summary(total.model)
for(i in unique(dprime$FaceIdentity)){print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2][1]$Pr(>F))}
for(i in unique(dprime$FaceIdentity)){print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2][1]$`Pr(>F)`)}
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2][1]$`Pr(>F)`)
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2]
)
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2]$`Pr(>F)`
)
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2][$`Pr(>F)`][1]
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2][[1]]
)
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[2][[1]]$`Pr(>F)`
)
test[[2]]
test[[2]][[1]]
test[[2]][[2]]
test[[2]][[1]]$`Pr(>F)`
test[[2]][[1]]$`Pr(>F)`[1]
print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[[2]][[1]]$`Pr(>F)`[1])
for(i in unique(dprime$FaceIdentity)){print(summary(aov(dprime ~ Emotion + Error(Subject/Emotion), data = filter(dprime, FaceIdentity == i)))[[2]][[1]]$`Pr(>F)`[1])}
install.packages("ez")
install.packages("ez")
install.packages("ez")
install.packages("ez")
library(ez)
library("lme4", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:lme4", unload=TRUE)
install.packages('ez')
library(ez)
library("ez", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("lme4")
library("ez", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ezANOVA(filter(dprime. FaceIdentity==i), Subject, within = Emotion)
ezANOVA(filter(dprime, FaceIdentity==i), Subject, within = Emotion)
library(dplyr)
ezANOVA(filter(dprime, FaceIdentity==i), Subject, within = Emotion)
ezANOVA(filter(dprime, FaceIdentity==i), dv = dprime, wid = Subject, within = Emotion)
test <- ezANOVA(filter(dprime, FaceIdentity==i), dv = dprime, wid = Subject, within = Emotion)
test$ANOVA$ges
for(i in unique(dprime$FaceIdentity)){test <- c(test, ezANOVA(filter(dprime, FaceIdentity==i), dv = dprime, wid = Subject, within = Emotion)$ANOVA$ges)}
test <- test[-1]
test
test<- test[-c(1,2)]
test
test <- unlist(test)
test
test$effectSize <- test
test$effectSize
test$ID <- unique(dprime$FaceIdentity)
test
test$``<- NULL
test[[1]] <- NULL
test
vars <- test$effectSize
vars <- NULL
vars$effectSize <- test$effectSize
vars$ID <- test$ID
test <- order_by(vars, var$ID)
test <- order_by(vars, var$effectSize)
vars <- cbind(test$effectSize, test$ID)
vars <- as.data.frame(vars)
vars <- order_by(vars, effectSize)
vars <- order_by(vars, vars$effectSize)
vars <- order_by(vars, vars$V1)
View(vars)
View(info_base)
load("~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/BackupwithMDS.RData")
test <- cart2pol(MDS2d$points[,1], MDS2d$points[,2])
View(test)
test <- t(test[1,])
test
cor(test, info_base$Intensity..0.1.,)
cor(test, info_base$Intensity..0.1.)
cor(t(test), info_base$Intensity..0.1.)
cor(t(test), info_base$Intensity..0.1.. na.rm=T)
cor(t(test), info_base$Intensity..0.1.., na.rm=T)
cor(t(test), info_base$Intensity..0.1.., use = "complete.obs")
cor(t(test), info_base$Intensity..0.1..[sample(1:ncol(test), ncol(test))], use = "complete.obs")
cor(t(test), info_base$Intensity..0.1..[sample(1:ncol(test), ncol(test))], use = "pairwise.complete.obs")
t(test)
info_base$Intensity..0.1..
info_base$`Intensity..0.1..``
info_base$`Intensity..0.1..`
info_base$`Intensity..0.1..`
info_base$`Intensity..0.1.`
cor(t(test), info_base$Intensity..0.1.[sample(1:ncol(test), ncol(test))], use = "pairwise.complete.obs")
cor(t(test), info_base$Intensity..0.1., use = "pairwise.complete.obs")
test <- t(test)
test
test$Radius <- test[,1]
test
test
t(test)
test <- cart2pol(MDS2d$points[,1], MDS2d$points[,2])
radius <- t(test[1,])
View(radius)
radius <- test[1,]
radius <- t(test[1,])
radius <- t(radius)
colnames(radius)  <- "Radius"
colnames(radius)  <- c("Radius")
View(radius)
radius$FID <- info_base$Displayer.ID
radius <- radius[-length(radius)]
radius
radius <- t(test[1,])
radius <- t(radius)
colnames(radius)  <- c("Radius")
radius <- cbind(radius, info_base$Displayer.ID)
View(radius)
radius <- cbind(radius, as.character(info_base$Displayer.ID))
radius <- radius[,-2]
colnames(radius)[2] <- "FID"
colnames(radius)[2] <- c("FID")
View(radius)
summ <- summarise(group_by(radius, FID), range = range(Radius))
radius <- as.data.frame(radius)
radius$Image <- rownames(radius)
radius <- merge(radius, info_base, by.x = "Image", by.y="Picture.ID")
radius <- radius[complete.cases(radius),]
cor(radius)
cor(radius$Radius, radius$Intensity..0.1.)
class(radius$Radius)
radius$Radius <- as.numeric(as.character(radius$Radius))
class(radius$Radius)
cor(radius$Radius, radius$Intensity..0.1.)
summ <- summarise(group_by(radius, FID), rangeRad = range(Radius), rangeInt = range(Intensity..0.1.))
diff(range(1:10))
summ <- summarise(group_by(radius, FID), rangeRad = diff(range(Radius)), rangeInt = diff(range(Intensity..0.1.)))
View(summ)
cor(summ$rangeRad, summ$rangeInt)
plot(summ$rangeRad, summ$rangeInt)
View(info_base)
library(dplyr)
summarise(group_by(info_base, Displayer.ID), sd = sd(Intensity..0.1.))
summarise(group_by(filter(info_base, Display != "neutral"), Displayer.ID), sd = sd(Intensity..0.1.))
sdOfFaceIdentities <- summarise(group_by(filter(info_base, Display != "neutral"), Displayer.ID), sd = sd(Intensity..0.1.))
View(sdOfFaceIdentities)
plot(sdOfFaceIdentities)
plot(sdOfFaceIdentities[order(sdOfFaceIdentities$sd)])
plot(sdOfFaceIdentities[order(sdOfFaceIdentities$sd),])
plot(sdOfFaceIdentities$sd)
plot(sort(sdOfFaceIdentities$sd))
text(x = 1:30, y = sort(sdOfFaceIdentities$sd), labels = 1:30)
plot(sdOfFaceIdentities[order(sd),])
sdOfFaceIdentities <- arrange(sdOfFaceIdentities, sd)
View(sdOfFaceIdentities)
sdOfFaceIdentities <- desc(sdOfFaceIdentities, sd)
sdOfFaceIdentities <- (sdOfFaceIdentities, desc(sd))
sdOfFaceIdentities <- arrange(sdOfFaceIdentities, desc(sd))
plot(sort(sdOfFaceIdentities$sd))
text(x = 30:1, y = sort(sdOfFaceIdentities$sd), labels = 1:30)
text(x = 1:30, y = sort(sdOfFaceIdentities$sd), labels = 30:1)
plot(sort(sdOfFaceIdentities$sd))
text(x = 1:30, y = sort(sdOfFaceIdentities$sd), labels = 30:1)
keepers <- sdOfFaceIdentities[1:12,]
View(keepers)
for(i in keepers$Displayer.ID){}
for(i in keepers$Displayer.ID){
data <- filter(info_base, Displayer.ID == i)
data <- filter(data, Display != "neutral")
plot(sort(data))
}
par(mfrow=c(3,4))
for(i in keepers$Displayer.ID){
data <- filter(info_base, Displayer.ID == i)
data <- filter(data, Display != "neutral")
plot(sort(data$`Intensity..0.1.`))
}
par(mfrow=c(3,4))
for(i in keepers$Displayer.ID){
data <- filter(info_base, Displayer.ID == i)
data <- filter(data, Display != "neutral")
plot(sort(data$`Intensity..0.1.`), main = i)
}
plot(filter(info_base, Display != "neutral", Displayer.ID %in% keepers$Displayer.ID)$`Intensity..0.1.`)
par(mfrow=c(1,1))
plot(filter(info_base, Display != "neutral", Displayer.ID %in% keepers$Displayer.ID)$`Intensity..0.1.`)
plot(sort(filter(info_base, Display != "neutral", Displayer.ID %in% keepers$Displayer.ID)$`Intensity..0.1.`))
save.image("~/Dropbox/WSEFEP_HQ_042016/Data Analysis/FaceExpressivity/Backup-01-12-17.RData")
View(sdOfFaceIdentities)
sort(sdOfFaceIdentities$sd, index.return=T)
sdOfFaceIdentities<- sdOfFaceIdentities[sort(sdOfFaceIdentities$sd, index.return=T)]
sdOfFaceIdentities<- sdOfFaceIdentities[sort(sdOfFaceIdentities$sd, index.return=T)$ix,]
View(sdOfFaceIdentities)
sdOfFaceIdentities<- sdOfFaceIdentities[sort(sdOfFaceIdentities$sd, index.return=T, decreasing = T)$ix,][1:10,]
View(sdOfFaceIdentities)
View(data2)
library(dplyr)
write.csv(summarise(group_by(data2, Subject), Age = unique(Age)), file="participantSummary.csv")
View(alldata)
View(alldata)
View(alldata)
View(data)
data <- data2[!(data2$Subject %in% c(11, 42, 77, 43)),] #43 removed for >95% same response, others for notes in binder
data<- data[-7813,]
data$RT <- as.numeric(data$RT)
data$Response <- as.numeric(data$Response)
data$Answer <- as.numeric(data$Answer)
data <- data[data$RT<mean(data$RT)+5*sd(data$RT),]
data <- data[data$Experiment.Stage==1,]
k <- 0
for(i in unique(data$Subject)){
test <- sum(data$Response[data$Subject==i])/length(data$Response[data$Subject==i])
if(test<0.05 | test>0.95){
k <- k+1
print(i)
}
}
print(k)
View(data)
library(dplyr)
FAdata <- filter(data, Answer==0, Response==1)
View(FAdata)
test <- mvtnorm::rmvnorm(10)
test <- mvtnorm::rmvnorm(10, mean = c(50,5,100) sigma = diag(c(10,1,15)))
test <- mvtnorm::rmvnorm(10, mean = c(50,5,100), sigma = diag(c(10,1,15)))
cor(test)
pcor.test(test)
pcor(test)
psych::partial.r(cor(test), c(2,1), c(3))
psych::partial.r(cor(test), c(3,1), c(2))
test <- mvtnorm::rmvnorm(10, mean = c(50,5,100))
cor(test)
test <- mvtnorm::rmvnorm(100, mean = c(50,5,100))
cor(test)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100))
cor(test)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = c(10,1,15))
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = diag(c(10,1,15)))
cor(test)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(.3,-.5,-.2)*10,c(.3,-.5,-.2),c(.3,-.5,-.2)*15))
cbind(c(.3,-.5,-.2)*10,c(.3,-.5,-.2),c(.3,-.5,-.2)*15)
cbind(c(1,-.5,-.2)*10,c(.3,1,-.2),c(.3,1,-.2)*15)
cbind(c(1,-.5,-.2)*10,c(.3,1,-.2),c(.3,-.5,1)*15)
cbind(c(1,-.5,-.2)*10,c(.3,1,-.2),c(-.2,-.5,1)*15)
cbind(c(1,-.5,-.2*15)*10,c(-.5*10,1,.3),c(-.2*10,-.5,1)*15)
cbind(c(1,-.5,-.2*15)*10,c(-.5*10,1,.3*15),c(-.2*10,.3,1)*15)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(1,-.5,-.2*15)*10,c(-.5*10,1,.3*15),c(-.2*10,.3,1)*15))
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(1,.5,.2*15)*10,c(.5*10,1,.3*15),c(.2*10,.3,1)*15))
cbind(c(1,.5,.2*15)*10,c(.5*10,1,.3*15),c(.2*10,.3,1)*15)
cbind(c(1,.5,.2*15^2)*10^2,c(.5*10^2,1,.3*15^2),c(.2*10^2,.3,1)*15^2)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(1,.5,.2*15^2)*10^2,c(.5*10^2,1,.3*15^2),c(.2*10^2,.3,1)*15^2))
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(1,.5/10,.2*15/10)*10^2,c(.5*10,1,.3*15),c(.2*10/15,.3/15,1)*15^2))
plot(test[,1:2])
plot(test[,2:3])
plot(test[,c(1,3)])
cor(test)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(1,-.5/10,.2*15/10)*10^2,c(-.5*10,1,.3*15),c(.2*10/15,.3/15,1)*15^2))
cor(test)
test <- mvtnorm::rmvnorm(1000, mean = c(50,5,100), sigma = cbind(c(1,.5/10,-.2*15/10)*10^2,c(.5*10,1,.3*15),c(-.2*10/15,.3/15,1)*15^2))
cor(test)
psych::partial.r(test, c(1,2),3)
psych::partial.r(test, c(1,3),2)
psych::partial.r(test, c(2,3),1)
summary(lm(V1 ~ V2, data = test))
summary(lm(test[,1] ~ test[,2]))
test <- mvtnorm::rmvnorm(85, mean = c(50,5,100), sigma = cbind(c(1,.5/10,-.2*15/10)*10^2,c(.5*10,1,.3*15),c(-.2*10/15,.3/15,1)*15^2))
summary(lm(test[,1] ~ test[,2]))
summary(lm(test[,1] ~ test[,2] + test[,3]))
View(test)
plot3Drgl::points3Drgl()
plot3Drgl::points3Drgl(test)
plot3Drgl::plot3Drgl(test)
plot3Drgl::scatter3D(test)
test <- data.frame(test)
colnames(test) <- c("Sleep Quality", "Coffee consumption", "IQ")
test <- mvtnorm::rmvnorm(85, mean = c(50,3,100), sigma = cbind(c(1,-.5/10,0*15/10)*10^2,c(-.5*10,1,.3*15),c(0*10/15,.3/15,1)*15^2))
test <- data.frame(test)
colnames(test) <- c("Sleep Quality", "Coffee consumption", "IQ")
hist(test$IQ)
hist(test$`Sleep Quality`)
hist(test$`Coffee consumption`)
summary(lm(`Sleep Quality`~`Coffee consumption`, data = test))
summary(lm(`Sleep Quality`~`Coffee consumption` + `IQ`, data = test))
test <- mvtnorm::rmvnorm(85, mean = c(50,3,100), sigma = cbind(c(1,-.5/10,0.1*15/10)*10^2,c(-.5*10,1,.3*15),c(0.1*10/15,.3/15,1)*15^2))
test <- data.frame(test)
colnames(test) <- c("Sleep Quality", "Coffee consumption", "IQ")
colnames(test) <- c("Sleep Quality", "Coffee consumption", 'Fitness')
colnames(test) <- c("Sleep_Quality", "Coffee_Consumption", 'Fitness')
summary(lm(Sleep_Quality ~ Coffee_Consumption + `Fitness`, data = test))
summary(lm(Sleep_Quality ~ Coffee_Consumption, data = test))
test <- mvtnorm::rmvnorm(85, mean = c(50,3,75), sigma = cbind(c(1,-.5/10,0.1*15/10)*10^2,c(-.5*10,1,.3*15),c(0.1*10/15,.3/15,1)*15^2))
colnames(test) <- c("Sleep_Quality", "Coffee_Consumption", "Resting_Heart_Rate")
test <- data.frame(test)
write.csv("~/Dropbox/PSYC 218 001/Assignment 3/DemoData.csv", test)
write.csv(test, "~/Dropbox/PSYC 218 001/Assignment 3/DemoData.csv")
write.csv(test, "~/Dropbox/PSYC 218 001/Assignment 3/DemoData.csv", row.names = F)
test <- mvtnorm::rmvnorm(85, mean = c(50,3,75,120), sigma = cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2),c(0*10/20,.2/20,0.7*15/20, 1)*20^2))
test <- mvtnorm::rmvnorm(85, mean = c(50,3,75,120), sigma = cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0*10/20,.2/20,0.7*15/20, 1)*20^2))
cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0*10/20,.2/20,0.7*15/20, 1)*20^2)
.2/20
*20
cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0*10/20,(.2)/20,0.7*15/20, 1)*20^2)
cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0,(0.2)/20,0.7*15/20, 1)*20^2)
cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0,0.2/20,0.7*15/20, 1)*20^2)
cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0,0.2/20,0.7*15/20, 1)*20^2)
c(0,0.2/20,0.7*15/20, 1)*20^2
0.2/20
0.2/20*20^2
cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2*20),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0,0.2/20,0.7*15/20, 1)*20^2)
test <- mvtnorm::rmvnorm(85, mean = c(50,3,75,120), sigma = cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2*20),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0,0.2/20,0.7*15/20, 1)*20^2))
colnames(test) <- c("Sleep_Quality", "Coffee_Consumption", "Resting_Heart_Rate", "Max_Heart_Rate")
test <- data.frame(test)
write.csv(test, "~/Dropbox/PSYC 218 001/Assignment 3/DemoData.csv", row.names = F)
test <- mvtnorm::rmvnorm(85, mean = c(50,3,75,120), sigma = cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.2*20),c(0.1*10/15,.3/15,1,0.7*20/15)*15^2,c(0,0.2/20,0.7*15/20, 1)*20^2))
lm(test)
summary(test[,1]~ test[,2] + test[,3] + test[,4])
summary(lm(test[,1]~ test[,2] + test[,3] + test[,4]))
test <- mvtnorm::rmvnorm(85, mean = c(50,3,75,120), sigma = cbind(c(1,-.5/10,0.1*15/10, 0)*10^2,c(-.5*10,1,.3*15,0.02*20),c(0.1*10/15,.3/15,1,0.1*20/15)*15^2,c(0,0.02/20,0.1*15/20, 1)*20^2))
summary(lm(test[,1]~ test[,2] + test[,3] + test[,4]))
colnames(test) <- c("Sleep_Quality", "Coffee_Consumption", "Resting_Heart_Rate", "Max_Heart_Rate")
write.csv(test, "~/Dropbox/PSYC 218 001/Assignment 3/DemoData.csv", row.names = F)
